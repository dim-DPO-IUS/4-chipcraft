#include "matrix.h"

// Создаем объект матрицы с параметрами из matrix.h
static LedControl matrix(MATRIX_DIN_PIN, MATRIX_CLK_PIN, MATRIX_CS_PIN, MATRIX_DEVICES);

// Битовые маски цифр
const byte digits[10][5] = {
    // 0 - ███   (зеркально: 111 -> 111)
    //     █ █   (зеркально: 101 -> 101)
    //     █ █   (зеркально: 101 -> 101)
    //     █ █   (зеркально: 101 -> 101)
    //     ███   (зеркально: 111 -> 111)
    {B111, B101, B101, B101, B111},

    // 1 -   █   (зеркально: 010 -> 010)
    //       █   (зеркально: 010 -> 010)
    //       █   (зеркально: 010 -> 010)
    //       █   (зеркально: 010 -> 010)
    //       █   (зеркально: 010 -> 010)
    {B010, B010, B010, B010, B010},

    // 2 - ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //     ███   (зеркально: 111 -> 111)
    //     █     (зеркально: 100 -> 001)
    //     ███   (зеркально: 111 -> 111)
    {B111, B100, B111, B001, B111},

    // 3 - ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //     ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //     ███   (зеркально: 111 -> 111)
    {B111, B100, B111, B100, B111},

    // 4 - █ █   (зеркально: 101 -> 101)
    //     █ █   (зеркально: 101 -> 101)
    //     ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //       █   (зеркально: 001 -> 100)
    {B101, B101, B111, B100, B100},

    // 5 - ███   (зеркально: 111 -> 111)
    //     █     (зеркально: 100 -> 001)
    //     ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //     ███   (зеркально: 111 -> 111)
    {B111, B001, B111, B100, B111},

    // 6 - ███   (зеркально: 111 -> 111)
    //     █     (зеркально: 100 -> 001)
    //     ███   (зеркально: 111 -> 111)
    //     █ █   (зеркально: 101 -> 101)
    //     ███   (зеркально: 111 -> 111)
    {B111, B001, B111, B101, B111},

    // 7 - ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //       █   (зеркально: 001 -> 100)
    //       █   (зеркально: 001 -> 100)
    //       █   (зеркально: 001 -> 100)
    {B111, B100, B100, B100, B100},

    // 8 - ███   (зеркально: 111 -> 111)
    //     █ █   (зеркально: 101 -> 101)
    //     ███   (зеркально: 111 -> 111)
    //     █ █   (зеркально: 101 -> 101)
    //     ███   (зеркально: 111 -> 111)
    {B111, B101, B111, B101, B111},

    // 9 - ███   (зеркально: 111 -> 111)
    //     █ █   (зеркально: 101 -> 101)
    //     ███   (зеркально: 111 -> 111)
    //       █   (зеркально: 001 -> 100)
    //     ███   (зеркально: 111 -> 111)
    {B111, B101, B111, B100, B111}};

void initMatrix() {
    matrix.shutdown(0, false);
    matrix.setIntensity(0, 8);
    matrix.clearDisplay(0);
}

void displayDigit(int digit, int x_offset)
{
    if (digit < 0 || digit > 9)
        return;

    for (int row = 0; row < 5; row++) {
        byte row_data = digits[digit][row];
        for (int col = 0; col < 3; col++) {
            if (row_data & (1 << col)) {
                matrix.setLed(0, row + 1, col + x_offset, true);
            }
        }
    }
}

void displayTemperature( float temperatureC)
{
    int temp_int = (int)temperatureC;
    matrix.clearDisplay(0);

    if (temp_int >= 10) {
        displayDigit(temp_int / 10, 1); // Десятки
        displayDigit(temp_int % 10, 5); // Единицы
    } else {
        displayDigit(temp_int, 3); // Одна цифра по центру
    }
}
